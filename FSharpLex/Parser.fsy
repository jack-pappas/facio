%{
(*

Copyright 2005-2008 Microsoft Corporation
Copyright 2012-2014 Jack Pappas

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*)

open FSharpLex.SpecializedCollections
open FSharpLex
open FSharpLex.Ast

/// Parser helper functions.
[<AutoOpen>]
module internal ParserUtils =
    /// <summary>
    /// Creates a <see cref="SourcePositionRange"/> value from a
    /// <see cref="ParseState"/>'s current result range.
    /// </summary>
    let parseStatePosRange (parseState : Microsoft.FSharp.Text.Parsing.IParseState) =
        let rawStartPos, rawEndPos = parseState.ResultRange
        let startPos = SourcePosition (uint32 rawStartPos.Line, uint32 rawStartPos.Column)
        let endPos = SourcePosition (uint32 rawEndPos.Line, uint32 rawEndPos.Column)
        SourcePositionRange (startPos, endPos)

%}

%type <Specification> spec
%token <string> STRING IDENT
%token <CodeFragment> CODE
%token <char> CHAR
%token <string> UNICODE_CATEGORY
%token RULE PARSE LET AND
%token LPAREN RPAREN
%token TILDE
%token EOF BAR AMP HAT DOT PLUS STAR QMARK EQUALS UNDERSCORE LBRACK RBRACK DASH
%start spec
%right BAR
%left regexp_or regexp_and regexp_xor
%left regexp_seq
%nonassoc regexp_opt
%nonassoc regexp_plus regexp_star
%%

spec:
    | codeopt Macros RULE Rules codeopt {
        {   Header = $1;
            Footer = $5;
            Macros = $2;
            Rules = $4; } }

codeopt:
    | CODE {
        let posRange = Some (parseStatePosRange parseState)
        Some { Value = $1; PositionRange = posRange; } }

    | { None }

Macros:
    | { [] }
    | macro Macros { $1 :: $2 }

macro:
    | LET IDENT EQUALS regexp {
        match $4 with
        | Pattern pattern ->
            let posRange = Some (parseStatePosRange parseState)
            ({ Value = $2; PositionRange = posRange; }, pattern)

        | EndOfFile ->
            let msg = sprintf "End-of-file pattern in macro '%s'." $2
            raise <| exn msg
        }

Rules:
    | rule AND Rules { $1 :: $3 }
    | rule { [$1] }

rule:
    | IDENT args EQUALS PARSE optbar clauses {
        let rule = {
            Parameters = $2;
            Clauses = $6; }
        let posRange = Some (parseStatePosRange parseState)

        ({ Value = $1; PositionRange = posRange; }, rule) }

args:
    | { [] }
    | IDENT args { $1 :: $2 }

optbar:
    | { }
    | BAR { }

clauses:
    | clause BAR clauses { $1 :: $3 }
    | clause { [$1] }

clause:
    | regexp CODE {
        let actionPosRange = Some (parseStatePosRange parseState)
        // TODO : Correctly handle getting the position range for the pattern.
        { Pattern = { Value = _1; PositionRange = None; };
          Action = { Value = _2; PositionRange = actionPosRange; }; }
      }

regexp:
    | CHAR {
        Pattern <| Character $1 }
    | UNICODE_CATEGORY {
        Pattern <| UnicodeCategory $1 }
    | EOF {
        EndOfFile }
    | UNDERSCORE {
        Pattern Any }
    | STRING {
        Pattern <| Pattern.literalString $1 }
    | IDENT {
        Pattern <| Macro $1 }

    | regexp regexp %prec regexp_seq {
        match $1, $2 with
        | Pattern pat1, Pattern pat2 ->
            Pattern <| Concat (pat1, pat2)
        | _ ->
            raise <| exn "End-of-file marker in Concat pattern." }

    | regexp PLUS %prec regexp_plus {
        match $1 with
        | Pattern pattern ->
            Pattern <| OneOrMore pattern
        | EndOfFile ->
            raise <| exn "End-of-file marker in OneOrMore pattern." }

    | regexp STAR %prec regexp_star {
        match $1 with
        | Pattern pattern ->
            Pattern <| Star pattern
        | EndOfFile ->
            raise <| exn "End-of-file marker in Star pattern." }

    | regexp QMARK %prec regexp_opt {
        match $1 with
        | Pattern pattern ->
            Pattern <| Optional pattern
        | EndOfFile ->
            raise <| exn "End-of-file marker in Optional pattern." }

    | regexp BAR regexp %prec regexp_or {
        match $1, $3 with
        | Pattern pat1, Pattern pat2 ->
            Pattern <| Or (pat1, pat2)
        | _ ->
            raise <| exn "End-of-file marker in Or pattern." }

    | regexp AMP regexp %prec regexp_and {
        match $1, $3 with
        | Pattern pat1, Pattern pat2 ->
            Pattern <| And (pat1, pat2)
        | _ ->
            raise <| exn "End-of-file marker in And pattern." }

    | regexp HAT regexp %prec regexp_xor {
        match $1, $3 with
        | Pattern pat1, Pattern pat2 ->
            Pattern <| Xor (pat1, pat2)
        | _ ->
            raise <| exn "End-of-file marker in Xor pattern." }

    | LPAREN regexp RPAREN { $2 }
    | LBRACK charset RBRACK {
        Pattern <| CharacterSet $2 }
    | LBRACK HAT charset RBRACK {
        Pattern <| Negate (CharacterSet $3) }

charset:
    | CHAR {
        CharSet.singleton $1 }
    | CHAR DASH CHAR {
        CharSet.ofRange $1 $3 }
    | charset charset {
        CharSet.union $1 $2 }
